{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "jest/globals": true,
    "node": true
  },
  "globals": {
    "_": "readonly",
    "google": "readonly"
  },
  "extends": [
    "airbnb",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "prettier"
  ],
  "plugins": [
    "import",
    "jest",
    "react",
    "react-hooks",
    "prettier",
    "@typescript-eslint"
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx",
          ".json"
        ]
      },
      "webpack": {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx",
          ".json"
        ],
        "config": "./webpack/base"
      }
    }
  },
  "rules": {
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": [
      "error"
    ],
    "import/no-unresolved": [
      2,
      {
        "commonjs": true,
        "amd": true
      }
    ],
    "import/named": 2,
    "import/namespace": 2,
    "import/default": 2,
    "import/export": 2,
    "import/order": [
      "error",
      {
        // Always insert nl between groups
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc", /* sort in ascending order */
          "caseInsensitive": true /* ignore case */
        },
        // We want to import react before the other externals
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": [
          "internal"
        ],
        "groups": [
          // Built-in modules first (fs, path, etc)
          "builtin",
          // Externals are next (react, redux, etc)
          "external",
          // Internals are next (@app/**/*, etc)
          "internal",
          // Parent directories imports are the next (../**/*)
          "parent",
          // Same directory imports are the next (./foo)
          "sibling",
          // And the index is the final one ('./')
          "index"
        ]
      }
    ],
    "no-new": 0,
    "curly": [
      2,
      "all"
    ],
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": true
      }
    ],
    "max-len": [
      "warn",
      {
        "code": 85,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true,
        "ignoreComments": true,
        "ignoreUrls": true,
        "ignorePattern": "^import [^,]+ from"
      }
    ],
    "comma-dangle": [
      "error",
      "never"
    ],
    "jsx-a11y/click-events-have-key-events": 0,
    "jsx-a11y/label-has-associated-control": 0,
    "semi": [
      2,
      "never"
    ],
    "jsx-a11y/no-noninteractive-element-interactions": 0,
    "camelcase": 0,
    "new-cap": 0,
    "strict": 0,
    "arrow-parens": 0,
    "no-underscore-dangle": 0,
    "no-use-before-define": 0,
    "eol-last": 0,
    "quotes": [
      2,
      "single",
      {
        "avoidEscape": true
      }
    ],
    "eqeqeq": 0,
    "no-useless-catch": 0,
    "no-nested-ternary": 0,
    "import/newline-after-import": 0,
    "import/first": 0,
    "class-methods-use-this": 0,
    "react/prop-types": 0,
    "react/require-default-props": 0,
    "react/jsx-filename-extension": 0,
    "react/jsx-no-bind": 0,
    "react/prefer-stateless-function": 0,
    "react/jsx-wrap-multilines": 0,
    "jsx-a11y/no-static-element-interactions": 0,
    "import/no-named-as-default-member": 0,
    "jsx-a11y/img-has-alt": 0,
    "no-return-assign": 0,
    "jsx-a11y/href-no-hash": 0,
    "jsx-a11y/label-has-for": 0,
    "jsx-a11y/media-has-caption": 0,
    "react/display-name": 0,
    "react/no-string-refs": 0,
    "no-mixed-operators": 0,
    "no-param-reassign": 0,
    "react/forbid-prop-types": 0,
    "react/jsx-props-no-spreading": 0,
    "react/jsx-no-target-blank": 0,
    "react/no-unused-prop-types": 0,
    "no-console": 0,
    "no-shadow": 0,
    "consistent-return": 0,
    "react/no-unescaped-entities": 0,
    "no-unused-vars": "error",
    "prefer-const": 0,
    "jsx-quotes": 1,
    "react/jsx-fragments": 0,
    "react/state-in-constructor": 0,
    "react/static-property-placement": 0,
    "react/jsx-no-undef": 1,
    "react/jsx-uses-vars": 1,
    "react/no-find-dom-node": 0,
    "global-require": 0,
    "react/no-danger": 0,
    "react/no-did-mount-set-state": 0,
    "no-plusplus": 0,
    "array-callback-return": 0,
    "react/no-array-index-key": 0,
    "import/no-extraneous-dependencies": 0,
    "no-empty": 0,
    "import/no-duplicates": "error",
    "default-case": 0,
    "no-undef": 2,
    "no-case-declarations": 0,
    "no-useless-escape": 0,
    "no-bitwise": 0,
    "no-confusing-arrow": 0,
    "no-prototype-builtins": 0,
    "jsx-a11y/anchor-has-content": 0,
    "jsx-a11y/anchor-is-valid": 0,
    "prefer-spread": 0,
    "no-self-assign": 0,
    "import/extensions": 0,
    "no-useless-constructor": 0,
    "import/prefer-default-export": 0,
    "react/destructuring-assignment": 0,
    "import/no-cycle": [
      "error",
      {
        "maxDepth": "âˆž"
      }
    ],
    "react/sort-comp": [
      1,
      {
        "order": [
          "constructor",
          "lifecycle",
          "everything-else",
          "render"
        ]
      }
    ],
    "prefer-destructuring": 0,
    "prettier/prettier": [
      "error",
      {
        "semi": false,
        "singleQuote": true,
        "printWidth": 80,
        "trailingComma": "none",
        "arrowParens": "avoid",
        "endOfLine": "auto"
      }
    ],
    "padding-line-between-statements": [
      2,
      // Always require blank lines after directive (like "use-strict"), except between directives
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      // Always require blank lines after import, except between imports
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "import",
        "next": "import"
      },
      // Always require blank lines before and after every sequence of variable declarations and export
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ],
        "next": "*"
      },
      // Always require blank lines before return statements
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ]
  },
  "overrides": [
    {
      "files": [
        "**/*.ts",
        "**/*.tsx"
      ],
      "rules": {
        "no-unused-vars": [
          "off"
        ],
        "no-undef": [
          "off"
        ],
        "@typescript-eslint/no-unused-vars": [
          2,
          {
            "args": "none"
          }
        ]
      }
    },
    {
      "files": [
        "**/*.d.ts"
      ],
      "rules": {
        /* seems it doesn't work!*/
        "react/jsx-no-duplicate-props": [
          2,
          {
            "ignoreCase": false
          }
        ],
        "react/no-multi-comp": [
          "off"
        ]
      }
    }
  ]
}
